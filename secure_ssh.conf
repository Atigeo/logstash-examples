input {
        file {
                path => "/var/log/secure"
                type => "secure"
        }
}

filter {
  if [type] == 'secure' {


    grok {
      match => [ "message", "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:hostname} sshd\[%{BASE10NUM:pid}\]: Accepted publickey for %{USERNAME:user} from %{IP:clientip}" ]
      add_tag => "ssh"
      add_tag => "successful_public_key_login"
      tag_on_failure => []
    }

    grok {
      match => [ "message", "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:hostname} sshd\[%{BASE10NUM:pid}\]: Accepted password for %{USERNAME:user} from %{IP:clientip}" ]
      add_tag => "ssh"
      add_tag => "successful_password_login"
      tag_on_failure => []
    }

    grok {
      match => [ "message", "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:hostname} sshd\[%{BASE10NUM:pid}\]: pam_unix\(sshd:session\): session closed for user %{USERNAME:user}" ]
      add_tag => "ssh"
      add_tag => "disconnect"
      tag_on_failure => []
    }


    grok {
      match => [ "message", "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:hostname} sshd\[%{BASE10NUM:pid}\]: Invalid user %{USERNAME:user} from %{IP:clientip}" ]
      add_tag => "ssh"
      add_tag => "invalid_user"
      tag_on_failure => []
    }

    grok {
      match => [ "message", "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:hostname} sshd\[%{BASE10NUM:pid}\]: Failed password for %{USERNAME:user} from %{IP:clientip}" ]
      add_tag => "ssh"
      add_tag => "failed_password"
      tag_on_failure => []
    }

   grok {
      match => [ "message", "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:hostname} sshd\[%{BASE10NUM:pid}\]: Failed password for invalid user %{USERNAME:user} from %{IP:clientip}" ]
      add_tag => "ssh"
      add_tag => "failed_password"
      add_tag => "invalid_user"
      tag_on_failure => []
    }

  }
}

output {
  elasticsearch { hosts => ["localhost:9200"] }
  stdout { codec => rubydebug }
}
